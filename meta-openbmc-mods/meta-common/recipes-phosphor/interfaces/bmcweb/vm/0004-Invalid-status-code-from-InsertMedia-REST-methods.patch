From 805641a2d189da9befc05168f51cef76da1ba326 Mon Sep 17 00:00:00 2001
From: Alicja Rybak <alicja.rybak@intel.com>
Date: Tue, 20 Apr 2021 16:32:37 +0200
Subject: [PATCH] Invalid status code from InsertMedia REST methods GET,
 PUT, DELETE, PATCH in proxy mode

Add handlers for GET, PUT, DELETE, PATCH method and function that
checks which mode is used and set suitable status code:
Not allowed for Legacy and Not found for Proxy.

Change-Id: Ib4c0a3e9a2a8853caa74c59239d9fcfed99c5e8b
Signed-off-by: Alicja Rybak <alicja.rybak@intel.com>
---
 redfish-core/lib/virtual_media.hpp | 155 +++++++++++++++++++++++++++++
 1 file changed, 155 insertions(+)

diff --git a/redfish-core/lib/virtual_media.hpp b/redfish-core/lib/virtual_media.hpp
index aa7c639..3e28164 100644
--- a/redfish-core/lib/virtual_media.hpp
+++ b/redfish-core/lib/virtual_media.hpp
@@ -548,6 +548,161 @@ class VirtualMediaActionInsertMedia : public Node
         return true;
     }
 
+    /**
+     * @brief Function checks if insert media request is Legacy or Proxy type
+     *        and sets suitable response code for unsupported REST method.
+     *
+     */
+    void CheckProxyMode(const std::shared_ptr<bmcweb::AsyncResp>& aResp,
+                        const crow::Request& req,
+                        const std::vector<std::string>& params)
+    {
+        if (params.size() != 2)
+        {
+            messages::internalError(aResp->res);
+            return;
+        }
+
+        // take resource name from URL
+        const std::string& resName = params[1];
+
+        if (params[0] != "bmc")
+        {
+            messages::resourceNotFound(aResp->res, "VirtualMedia.Insert",
+                                       resName);
+
+            return;
+        }
+
+        crow::connections::systemBus->async_method_call(
+            [this, aResp{std::move(aResp)}, req,
+             resName](const boost::system::error_code ec,
+                      const GetObjectType& getObjectType) {
+                if (ec)
+                {
+                    BMCWEB_LOG_ERROR << "ObjectMapper::GetObject call failed: "
+                                     << ec;
+                    aResp->res.result(boost::beast::http::status::not_found);
+
+                    return;
+                }
+                std::string service = getObjectType.begin()->first;
+                BMCWEB_LOG_DEBUG << "GetObjectType: " << service;
+
+                crow::connections::systemBus->async_method_call(
+                    [this, service, resName, req,
+                     aResp{aResp}](const boost::system::error_code ec,
+                                   ManagedObjectType& subtree) {
+                        if (ec)
+                        {
+                            BMCWEB_LOG_DEBUG << "DBUS response error";
+
+                            return;
+                        }
+
+                        for (auto& item : subtree)
+                        {
+                            std::string thispath = item.first.filename();
+                            if (thispath.empty())
+                            {
+                                continue;
+                            }
+
+                            if (thispath != resName)
+                            {
+                                continue;
+                            }
+
+                            auto mode = item.first.parent_path();
+                            auto type = mode.parent_path();
+                            if (mode.filename().empty() ||
+                                type.filename().empty())
+                            {
+                                continue;
+                            }
+
+                            if (type.filename() != "VirtualMedia")
+                            {
+                                continue;
+                            }
+
+                            // Check if dbus path is Legacy type
+                            if (mode.filename() == "Legacy")
+                            {
+                                BMCWEB_LOG_DEBUG << "InsertMedia only allowed "
+                                                    "with POST method "
+                                                    "in legacy mode";
+                                aResp->res.result(boost::beast::http::status::
+                                                      method_not_allowed);
+
+                                return;
+                            }
+                            // Check if dbus path is Proxy type
+                            if (mode.filename() == "Proxy")
+                            {
+                                // Not possible in proxy mode
+                                BMCWEB_LOG_DEBUG << "InsertMedia not "
+                                                    "allowed in proxy mode";
+                                aResp->res.result(
+                                    boost::beast::http::status::not_found);
+
+                                return;
+                            }
+                        }
+
+                        BMCWEB_LOG_DEBUG << "Parent item not found";
+                        aResp->res.result(
+                            boost::beast::http::status::not_found);
+                    },
+                    service, "/xyz/openbmc_project/VirtualMedia",
+                    "org.freedesktop.DBus.ObjectManager", "GetManagedObjects");
+            },
+            "xyz.openbmc_project.ObjectMapper",
+            "/xyz/openbmc_project/object_mapper",
+            "xyz.openbmc_project.ObjectMapper", "GetObject",
+            "/xyz/openbmc_project/VirtualMedia", std::array<const char*, 0>());
+    }
+
+    /**
+     * @brief Function handles GET method request.
+     */
+    void doGet(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+               const crow::Request& req,
+               const std::vector<std::string>& params) override
+    {
+        CheckProxyMode(asyncResp, req, params);
+    }
+
+    /**
+     * @brief Function handles PATCH method request.
+     */
+    void doPatch(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+                 const crow::Request& req,
+                 const std::vector<std::string>& params) override
+    {
+        CheckProxyMode(asyncResp, req, params);
+    }
+
+    /**
+     * @brief Function handles PUT method request.
+     */
+    void doPut(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+               const crow::Request& req,
+               const std::vector<std::string>& params) override
+    {
+        CheckProxyMode(asyncResp, req, params);
+    }
+
+    /**
+     * @brief Function handles DELETE method request.
+     */
+    void doDelete(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+                  const crow::Request& req,
+                  const std::vector<std::string>& params) override
+    {
+        CheckProxyMode(asyncResp, req, params);
+    }
+
     /**
      * @brief Function handles POST method request.
      *
-- 
2.17.1

